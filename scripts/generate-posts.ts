// scripts/generate-posts.ts
import * as fs from 'fs';
import * as path from 'path';

const projectsDir = path.join(process.cwd(), 'projects');
const outputFile = path.join(process.cwd(), 'lib', 'posts-data.ts');

function generatePostsData(): void {
  try {
    // Check if projects directory exists
    if (!fs.existsSync(projectsDir)) {
      console.log('Projects directory not found, creating empty posts data');
      writeEmptyPostsData();
      return;
    }

    const files = fs.readdirSync(projectsDir).filter(file => file.endsWith('.md'));
    
    if (files.length === 0) {
      console.log('No markdown files found, creating empty posts data');
      writeEmptyPostsData();
      return;
    }

    const postsData: Record<string, string> = {};
    
    files.forEach(file => {
      const slug = file.replace('.md', '');
      const filePath = path.join(projectsDir, file);
      const content = fs.readFileSync(filePath, 'utf8');
      
      // Escape template literals and quotes in content
      const escapedContent = content
        .replace(/\\/g, '\\\\')
        .replace(/`/g, '\\`')
        .replace(/\${/g, '\\${');
      
      postsData[slug] = escapedContent;
    });

    const output = `// This file is auto-generated by scripts/generate-posts.ts
// Do not edit manually

export const postsData: Record<string, string> = {
${Object.entries(postsData)
  .map(([slug, content]) => `  '${slug}': \`${content}\`,`)
  .join('\n')}
};
`;

    fs.writeFileSync(outputFile, output);
    console.log(`Generated posts data for ${files.length} posts`);
    
  } catch (error) {
    console.error('Error generating posts data:', error);
    writeEmptyPostsData();
  }
}

function writeEmptyPostsData(): void {
  const output = `// This file is auto-generated by scripts/generate-posts.ts
// Do not edit manually

export const postsData: Record<string, string> = {};
`;
  fs.writeFileSync(outputFile, output);
}

generatePostsData();